@inject NavigationManager NavigationManager
@inject ConfProgram.Services.ConferenceService ConferenceService
@using Microsoft.AspNetCore.WebUtilities
@implements IDisposable

@if (Crumbs.Count > 1)
{
    <nav aria-label="breadcrumb" class="mb-4">
        <ol class="breadcrumb">
            @foreach (var crumb in Crumbs)
            {
                if (crumb.IsLast)
                {
                    <li class="breadcrumb-item active" aria-current="page">@crumb.Text</li>
                }
                else
                {
                    <li class="breadcrumb-item">
                        <a href="@crumb.Url">@crumb.Text</a>
                    </li>
                }
            }
        </ol>
    </nav>
}

@code {
    private List<BreadcrumbItem> Crumbs = new();

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        BuildBreadcrumbs();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        BuildBreadcrumbs();
        InvokeAsync(StateHasChanged);
    }

    private void BuildBreadcrumbs()
    {
        Crumbs.Clear();

        // ✅ Удаляем query string из маршрута
        var baseUri = NavigationManager.ToBaseRelativePath(NavigationManager.Uri.Split('?')[0]);
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        var segments = baseUri.Split('/', StringSplitOptions.RemoveEmptyEntries);

        Crumbs.Add(new BreadcrumbItem("Главная", "/"));

        if (segments.Length == 0)
            return;

        if (segments[0].Equals("program", StringComparison.OrdinalIgnoreCase))
        {
            Crumbs.Add(new BreadcrumbItem("Программа", "/program", isLast: true));
            return;
        }

        if (segments[0].Equals("room", StringComparison.OrdinalIgnoreCase) && segments.Length >= 2)
        {
            string partId = segments[1];

            Crumbs.Add(new BreadcrumbItem("Программа", "/program"));

            string partName = GetPartName(partId);
            string partUrl = $"/room/{partId}";
            Crumbs.Add(new BreadcrumbItem(partName, partUrl));

            if (query.TryGetValue("room", out var roomId))
            {
                string? roomName = GetRoomName(partId, roomId!);
                string roomUrl = $"/room/{partId}?room={roomId}";
                Crumbs.Add(new BreadcrumbItem(roomName ?? roomId!, roomUrl, isLast: true));
                return;
            }

            // если нет room query — часть будет последним
            Crumbs[^1].IsLast = true;
            return;
        }

        // fallback
        string path = "";
        for (int i = 0; i < segments.Length; i++)
        {
            path += "/" + segments[i];
            bool isLast = i == segments.Length - 1;
            Crumbs.Add(new BreadcrumbItem(segments[i], path, isLast));
        }
    }

    private string GetPartName(string partId)
    {
        if (ConferenceService.Data.Parts.Count == 0)
        {
            ConferenceService.LoadDataAsync().Wait();
        }

        var part = ConferenceService.Data.Parts.FirstOrDefault(p => p.Id == partId);
        return part?.Name ?? partId;
    }

    private string? GetRoomName(string partId, string roomId)
    {
        var part = ConferenceService.Data.Parts.FirstOrDefault(p => p.Id == partId);
        var room = part?.Rooms.FirstOrDefault(r => r.Id == roomId);
        return room?.Title;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    class BreadcrumbItem
    {
        public string Text { get; set; }
        public string Url { get; set; }
        public bool IsLast { get; set; }

        public BreadcrumbItem(string text, string url, bool isLast = false)
        {
            Text = text;
            Url = url;
            IsLast = isLast;
        }
    }
}
