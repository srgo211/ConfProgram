@page "/room/{PartId}"
@using Microsoft.AspNetCore.WebUtilities
@using ConfProgram.Models
@using ConfProgram.Components  @* если компоненты находятся в папке Components *@
@inject NavigationManager NavigationManager
@inject ConfProgram.Services.ConferenceService ConferenceService
@implements IDisposable

@if (SelectedPart is null)
{
    <p class="text-muted">Часть не найдена.</p>
}
else
{
    <div class="container-fluid px-3">
        <div class="row mt-3 gx-1">
            <!-- Левая колонка: список комнат -->
            <div class="col-12 col-md-3 mb-3">
                <RoomList Rooms="SelectedPart.Rooms"
                          SelectedRoom="SelectedRoom"
                          OnRoomSelected="HandleRoomSelected" />
            </div>

            <!-- Правая колонка: таблица и/или аккордеон -->
            <div class="col-12 col-md-9">
                @if (SelectedRoom is not null)
                {
                    <div class="d-none d-md-block">
                        <!-- Только на >=768px -->
                        <RoomScheduleTable Room="SelectedRoom" />
                    </div>
                    <div class="d-block d-md-none">
                        <!-- Только на <768px -->
                        <RoomScheduleTable2 Room="SelectedRoom" />
                    </div>
                }
            </div>

          
        </div>
    </div>
}

@code {
    [Parameter]
    public string? PartId { get; set; }

    private ConferencePart? SelectedPart;
    private ConferenceRoom? SelectedRoom;

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;

        if (ConferenceService.Data.Parts.Count == 0)
            await ConferenceService.LoadDataAsync();

        SelectedPart = ConferenceService.Data.Parts.FirstOrDefault(p => p.Id == PartId);
        UpdateRoomFromQuery();
    }

    protected override void OnParametersSet()
    {
        SelectedPart = ConferenceService.Data.Parts.FirstOrDefault(p => p.Id == PartId);
        UpdateRoomFromQuery();
    }

    private void HandleRoomSelected(ConferenceRoom room)
    {
        NavigateToRoom(room);
    }

    private void NavigateToRoom(ConferenceRoom room)
    {
        NavigationManager.NavigateTo($"/room/{PartId}?room={room.Id}", replace: true);
        SelectedRoom = room;
        StateHasChanged();
    }

    private void UpdateRoomFromQuery()
    {
        if (SelectedPart is null)
            return;

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("room", out var roomId))
        {
            SelectedRoom = SelectedPart.Rooms.FirstOrDefault(r => r.Id == roomId);
        }
        else
        {
            SelectedRoom = null;
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        UpdateRoomFromQuery();
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
